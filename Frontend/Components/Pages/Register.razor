@page "/register"

@using System.ComponentModel.DataAnnotations
@using System.Net

@inject HttpClient HttpClient;
@inject NavigationManager NavigationManager;

<PageTitle>Register</PageTitle>

<h3>Register</h3>

<EditForm Model="@registrationModel" OnValidSubmit="@HandleRegister">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="mb-4">
        <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
        <input id="email" @bind="registrationModel.Email" type="email" class="mt-1 block w-full border rounded-md"/>
        <ValidationMessage For="@(() => registrationModel.Email)"/>
    </div>

    <div class="mb-4">
        <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
        <input id="password" @bind="registrationModel.Password" type="password" class="mt-1 block w-full border rounded-md"/>
        <ValidationMessage For="@(() => registrationModel.Password)"/>
    </div>

    <button type="submit" class="bg-blue-500 text-white py-2 px-4 rounded">
        Register
    </button>
</EditForm>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="mt-4 text-red-500">@Message</div>
}

@code {


    private RegistrationModel registrationModel = new();
    private string Message = string.Empty;

    private async Task HandleRegister()
    {
        try
        {
            var request = new Shared.Contracts.Auth.Requests.RegisterRequest(
                registrationModel.Email,
                registrationModel.Password
            );

            var response = await HttpClient.PostAsJsonAsync("api/register", request);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Message = $"Registration failed: {error}";
            }
        }
        catch (Exception ex)
        {
            Message = $"Error: {ex.Message}";
        }
    }

    public class RegistrationModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters long.")]
        [RegularExpression(@"(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&#])[A-Za-z\d@$!%*?&#]{8,}",
            ErrorMessage = "Password must contain at least one uppercase letter, one digit, and one special character.")]
        public string Password { get; set; } = string.Empty;
    }

}