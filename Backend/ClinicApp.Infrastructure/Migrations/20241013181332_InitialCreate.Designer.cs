// <auto-generated />
using System;
using ClinicApp.Infrastructure.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClinicApp.Infrastructure.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    [Migration("20241013181332_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClinicApp.Domain.Models.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Domain.Models.Clinics.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("ClinicApp.Domain.Models.Permissions.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AssignRole"
                        },
                        new
                        {
                            Id = 2,
                            Name = "RevokeRole"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CreateRole"
                        },
                        new
                        {
                            Id = 4,
                            Name = "DeleteRole"
                        },
                        new
                        {
                            Id = 5,
                            Name = "AddPermissionToRole"
                        },
                        new
                        {
                            Id = 6,
                            Name = "RemovePermissionFromRole"
                        },
                        new
                        {
                            Id = 7,
                            Name = "ReadPatient"
                        },
                        new
                        {
                            Id = 8,
                            Name = "CreatePatient"
                        },
                        new
                        {
                            Id = 9,
                            Name = "UpdatePatient"
                        },
                        new
                        {
                            Id = 10,
                            Name = "DeletePatient"
                        },
                        new
                        {
                            Id = 11,
                            Name = "ReadDoctor"
                        },
                        new
                        {
                            Id = 12,
                            Name = "CreateDoctor"
                        },
                        new
                        {
                            Id = 13,
                            Name = "UpdateDoctor"
                        },
                        new
                        {
                            Id = 14,
                            Name = "DeleteDoctor"
                        },
                        new
                        {
                            Id = 15,
                            Name = "ReadClinic"
                        },
                        new
                        {
                            Id = 16,
                            Name = "CreateClinic"
                        },
                        new
                        {
                            Id = 17,
                            Name = "UpdateClinic"
                        },
                        new
                        {
                            Id = 18,
                            Name = "DeleteClinic"
                        },
                        new
                        {
                            Id = 19,
                            Name = "ReadAppointment"
                        },
                        new
                        {
                            Id = 20,
                            Name = "CreateAppointment"
                        },
                        new
                        {
                            Id = 21,
                            Name = "UpdateAppointment"
                        },
                        new
                        {
                            Id = 22,
                            Name = "DeleteAppointment"
                        });
                });

            modelBuilder.Entity("ClinicApp.Domain.Models.Roles.AccountRole", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("AccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountRoles", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Domain.Models.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4747-b8c9-d0e1f2a3b4c5"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f6a1-4848-c9d0-e1f2a3b4c5d6"),
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-a1b2-4949-d0e1-f2a3b4c5d6e7"),
                            Name = "Patient"
                        },
                        new
                        {
                            Id = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            Name = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("ClinicApp.Domain.Models.Roles.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 9
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 12
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 14
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 15
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 16
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 17
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 18
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 19
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 20
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 21
                        },
                        new
                        {
                            RoleId = new Guid("d4e5f6a1-b2c3-4a4a-e1f2-a3b4c5d6e7f8"),
                            PermissionId = 22
                        },
                        new
                        {
                            RoleId = new Guid("a1b2c3d4-e5f6-4747-b8c9-d0e1f2a3b4c5"),
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = new Guid("a1b2c3d4-e5f6-4747-b8c9-d0e1f2a3b4c5"),
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = new Guid("a1b2c3d4-e5f6-4747-b8c9-d0e1f2a3b4c5"),
                            PermissionId = 9
                        },
                        new
                        {
                            RoleId = new Guid("a1b2c3d4-e5f6-4747-b8c9-d0e1f2a3b4c5"),
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = new Guid("a1b2c3d4-e5f6-4747-b8c9-d0e1f2a3b4c5"),
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = new Guid("a1b2c3d4-e5f6-4747-b8c9-d0e1f2a3b4c5"),
                            PermissionId = 12
                        },
                        new
                        {
                            RoleId = new Guid("a1b2c3d4-e5f6-4747-b8c9-d0e1f2a3b4c5"),
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = new Guid("a1b2c3d4-e5f6-4747-b8c9-d0e1f2a3b4c5"),
                            PermissionId = 14
                        },
                        new
                        {
                            RoleId = new Guid("a1b2c3d4-e5f6-4747-b8c9-d0e1f2a3b4c5"),
                            PermissionId = 15
                        },
                        new
                        {
                            RoleId = new Guid("a1b2c3d4-e5f6-4747-b8c9-d0e1f2a3b4c5"),
                            PermissionId = 16
                        },
                        new
                        {
                            RoleId = new Guid("a1b2c3d4-e5f6-4747-b8c9-d0e1f2a3b4c5"),
                            PermissionId = 17
                        },
                        new
                        {
                            RoleId = new Guid("a1b2c3d4-e5f6-4747-b8c9-d0e1f2a3b4c5"),
                            PermissionId = 18
                        },
                        new
                        {
                            RoleId = new Guid("a1b2c3d4-e5f6-4747-b8c9-d0e1f2a3b4c5"),
                            PermissionId = 19
                        },
                        new
                        {
                            RoleId = new Guid("a1b2c3d4-e5f6-4747-b8c9-d0e1f2a3b4c5"),
                            PermissionId = 20
                        },
                        new
                        {
                            RoleId = new Guid("a1b2c3d4-e5f6-4747-b8c9-d0e1f2a3b4c5"),
                            PermissionId = 21
                        },
                        new
                        {
                            RoleId = new Guid("a1b2c3d4-e5f6-4747-b8c9-d0e1f2a3b4c5"),
                            PermissionId = 22
                        },
                        new
                        {
                            RoleId = new Guid("b2c3d4e5-f6a1-4848-c9d0-e1f2a3b4c5d6"),
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = new Guid("b2c3d4e5-f6a1-4848-c9d0-e1f2a3b4c5d6"),
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = new Guid("b2c3d4e5-f6a1-4848-c9d0-e1f2a3b4c5d6"),
                            PermissionId = 9
                        },
                        new
                        {
                            RoleId = new Guid("b2c3d4e5-f6a1-4848-c9d0-e1f2a3b4c5d6"),
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = new Guid("b2c3d4e5-f6a1-4848-c9d0-e1f2a3b4c5d6"),
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = new Guid("c3d4e5f6-a1b2-4949-d0e1-f2a3b4c5d6e7"),
                            PermissionId = 11
                        });
                });

            modelBuilder.Entity("ClinicApp.Domain.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("User");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ClinicApp.Infrastructure.Database.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Infrastructure.Database.Outbox.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id", "Name");

                    b.ToTable("OutboxMessageConsumers", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Domain.Models.Doctors.Doctor", b =>
                {
                    b.HasBaseType("ClinicApp.Domain.Models.Users.User");

                    b.Property<string>("AcademicTitle")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uuid");

                    b.Property<string>("MedicalLicenseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Specialties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ClinicId");

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Domain.Models.Patients.Patient", b =>
                {
                    b.HasBaseType("ClinicApp.Domain.Models.Users.User");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("ClinicApp.Domain.Models.Roles.AccountRole", b =>
                {
                    b.HasOne("ClinicApp.Domain.Models.Accounts.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicApp.Domain.Models.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicApp.Domain.Models.Roles.RolePermission", b =>
                {
                    b.HasOne("ClinicApp.Domain.Models.Permissions.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicApp.Domain.Models.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicApp.Domain.Models.Users.User", b =>
                {
                    b.HasOne("ClinicApp.Domain.Models.Accounts.Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("ClinicApp.Domain.Models.Users.User", "AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ClinicApp.Domain.Models.Doctors.Doctor", b =>
                {
                    b.HasOne("ClinicApp.Domain.Models.Clinics.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId");

                    b.HasOne("ClinicApp.Domain.Models.Users.User", null)
                        .WithOne()
                        .HasForeignKey("ClinicApp.Domain.Models.Doctors.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("ClinicApp.Domain.Models.Patients.Patient", b =>
                {
                    b.HasOne("ClinicApp.Domain.Models.Users.User", null)
                        .WithOne()
                        .HasForeignKey("ClinicApp.Domain.Models.Patients.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicApp.Domain.Models.Accounts.Account", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
